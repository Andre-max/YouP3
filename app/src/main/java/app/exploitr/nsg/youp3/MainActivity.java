package app.exploitr.nsg.youp3;


import android.Manifest;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.net.http.SslError;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.provider.Settings;
import android.util.SparseArray;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.WindowManager;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SearchView;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.app.NotificationManagerCompat;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.drawable.DrawableCompat;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import com.crashlytics.android.Crashlytics;
import com.crashlytics.android.answers.Answers;
import com.crashlytics.android.answers.ContentViewEvent;
import com.getkeepsafe.taptargetview.TapTarget;
import com.getkeepsafe.taptargetview.TapTargetSequence;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.snackbar.Snackbar;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionButton;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionHelper;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionLayout;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RFACLabelItem;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RapidFloatingActionContentLabelList;

import java.io.File;
import java.net.URLEncoder;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import Book.BookMark;
import Book.BookMarkManager;
import Book.BookRealmController;
import Book.Launcher;
import Book.VideoScreen;
import at.huber.youtubeExtractor.Format;
import at.huber.youtubeExtractor.VideoMeta;
import at.huber.youtubeExtractor.YouTubeExtractor;
import at.huber.youtubeExtractor.YtFile;
import downloader.utils.BasicDownloadDetailsFetcher;
import downloader.utils.DownloadExecutorService;
import io.fabric.sdk.android.Fabric;
import io.realm.Realm;
import utils.DataStore;
import utils.FileHolder;
import utils.Helper;
import utils.SuperToast;

import static utils.Helper.verb;

@SuppressWarnings("FieldCanBeLocal")
@SuppressLint({"SetJavaScriptEnabled", "InflateParams", "StaticFieldLeak"})
public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener,
        RapidFloatingActionContentLabelList.OnRapidFloatingActionContentLabelListListener {

    public static final boolean isBuildFinal = false;
    public static final String reDownloadAction = "_redownload_action";
    public static final String broadCastIntent = "_broad_cast";
    public static final String broadCastIntentFullScreen = "_broad_cast_full";
    public static final String broadCastIntentToolbar = "_broad_cast_tool";
    public static final long CURRENT_TEST_CHROME_VERSION = 353808052L;
    private static final int REQUEST_CODE_PERMISSION = 120;
    private static final String ERROR_HTML = "file:///android_asset/index.html";
    public static boolean isActive = true;
    private static boolean toggleAdvDownload = false;
    private boolean canceled = false;
    private WebView mainView;
    //<editor-fold desc="BroadcastReceiver multiHandler to handle settings change events">
    final BroadcastReceiver multiHandler = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (Objects.equals(intent.getAction(), broadCastIntent) && mainView != null) {
                Helper.clearCookies(mainView, false);
                setDeskTopMode(mainView.getSettings(), intent.getBooleanExtra(broadCastIntent, false));
            } else if (Objects.equals(intent.getAction(), broadCastIntentFullScreen)) {
                if (intent.getBooleanExtra(broadCastIntentFullScreen, false)) {
                    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
                } else {
                    getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
                }
            } else if (Objects.equals(intent.getAction(), broadCastIntentToolbar)) {
                if (intent.getBooleanExtra(broadCastIntentToolbar, false)) {
                    if (getSupportActionBar() != null) {
                        getSupportActionBar().hide();
                    }
                } else {
                    if (getSupportActionBar() != null) {
                        getSupportActionBar().show();
                    }
                }
            }
        }
    };
    private DrawerLayout drawer;
    private ProgressBar indicator;
    private String urlAll = "", urlTitle = "";
    //<editor-fold desc="< Youtube page urls >">
    private String[] urlYtPages = new String[]{
            "https://www.youtube.com/feed/trending",
            "https://www.youtube.com/channel/UC1vGae2Q3oT5MkhhfW8lwjg",
            "https://www.youtube.com/channel/UC-9-kyTW8ZkZNDHQJ6FgpwQ",
            "https://www.youtube.com/channel/UCEgdi0XIXXZ-qJOFPf4JSKw",
            "https://www.youtube.com/channel/UCOpNcN46UbXVtpKMrmU4Abg",
            "https://www.youtube.com/channel/UClgRkhTL3_hImCAmdLfDE4g",
            "https://www.youtube.com/channel/UCYfdidRxbB8Qhf0Nx7ioOYw",
            "https://www.youtube.com/channel/UC4R8DWoMoI7CAwX8_LjQHig",
            "https://www.youtube.com/channel/UCzuqhhs6NWbgTzMuM09WKDQ"
    };
    //</editor-fold>
    private RapidFloatingActionLayout rfaLayout;
    //</editor-fold>
    private RapidFloatingActionButton rfaBtn;
    private RapidFloatingActionHelper rfabHelper;
    private RapidFloatingActionContentLabelList rfaContent;
    private boolean pageActivated = false;
    private Spinner pageSpinner;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.activity_main);

        isActive = true;
        DataStore.getInstance(getBaseContext()).setNewUserNoMoreForSERVICE_STARTER();

        if (DataStore.getInstance(getBaseContext()).isNewUserForSPLASH()) {
            startActivity(new Intent(this, IntroActivity.class));
            finish();
        }

        final Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        toolbar.inflateMenu(R.menu.mux_menu);

        if (isBuildFinal) {
            Fabric.with(this, new Crashlytics());
            setUserForLogging(); // you know what you're doing
        }

        /*Initializing Realm*/
        Realm.init(this);

        mainView = new WebView(MainActivity.this);

        ConstraintLayout mx = findViewById(R.id.main);
        ViewTreeObserver vto = mx.getViewTreeObserver();
        vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                int width = mx.getMeasuredWidth();
                int height = mx.getMeasuredHeight();
                mx.removeView(mainView);
                mx.addView(mainView, 0, new ConstraintLayout.LayoutParams(width, height));
                mx.getViewTreeObserver().removeOnGlobalLayoutListener(this);
            }
        });
        //Init Done
        if (DataStore.getInstance(getBaseContext()).isFullScreen()) {
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        if (DataStore.getInstance(getBaseContext()).isRemoveToolbar()) {
            if (getSupportActionBar() != null) getSupportActionBar().hide();
        } else {
            if (getSupportActionBar() != null) getSupportActionBar().show();
        }

        indicator = findViewById(R.id.indicator);
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
            Drawable drawableProgress = DrawableCompat.wrap(indicator.getIndeterminateDrawable());
            DrawableCompat.setTint(drawableProgress, Color.WHITE);
            indicator.setIndeterminateDrawable(DrawableCompat.unwrap(drawableProgress));
        } else {
            indicator.getIndeterminateDrawable().setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_IN);
        }

        rfaLayout = findViewById(R.id.activity_main_rfal);
        rfaBtn = findViewById(R.id.activity_main_rfab);
        rfaContent = new RapidFloatingActionContentLabelList(MainActivity.this);
        rfaContent.setOnRapidFloatingActionContentLabelListListener(this);
        List<RFACLabelItem> items = new ArrayList<>();
        items.add(new RFACLabelItem<Integer>()
                .setLabel("Share Link Of This Video")
                .setResId(R.drawable.ic_share_video)
                .setIconNormalColor(0xffd84315)
                .setIconPressedColor(0xffbf360c)
                .setWrapper(0)
        );
        items.add(new RFACLabelItem<Integer>()
                .setLabel("Fetch Downloadable File(s) Details")
                .setResId(R.drawable.ic_file_download)
                .setIconNormalColor(0xff4e342e)
                .setIconPressedColor(0xff3e2723)
                .setWrapper(1)
        );
        rfaContent.setItems(items);
        rfabHelper = new RapidFloatingActionHelper(
                MainActivity.this,
                rfaLayout,
                rfaBtn,
                rfaContent
        );
        rfabHelper.build();

        /*dare done*/

        IntentFilter filter = new IntentFilter();
        filter.addAction(broadCastIntent);
        filter.addAction(broadCastIntentFullScreen);
        filter.addAction(broadCastIntentToolbar);
        LocalBroadcastManager.getInstance(getBaseContext()).registerReceiver(multiHandler, filter);

        /*desk set*/

        checkFilePermsOkay(MainActivity.this);

        drawer = findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar,
                R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        final NavigationView navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        mainView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);

        WebSettings settings = mainView.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setCacheMode(WebSettings.LOAD_NO_CACHE);
        settings.setAppCacheEnabled(false);
        settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
        settings.setUseWideViewPort(true);
        settings.setSupportZoom(true);
        settings.setDisplayZoomControls(true);
        settings.setMediaPlaybackRequiresUserGesture(true);
        settings.setLoadWithOverviewMode(true);
        settings.setBuiltInZoomControls(true);
        settings.setUseWideViewPort(true);

        setDeskTopMode(mainView.getSettings(), DataStore.getInstance(getBaseContext()).isDeskModeEnabled());

        mainView.setWebChromeClient(new WebChromeClient() {
            @Override
            public void onReceivedTitle(WebView view, String pageTitle) {
                if (!pageTitle.equals("YouTube") && DataStore.getInstance(getBaseContext()).isDeskModeEnabled()) {
                    toolbar.setSubtitle(pageTitle);
                } else {
                    toolbar.setSubtitle("");
                }
            }
        });

        mainView.setWebViewClient(new WebViewClient() {
            @Override
            public void onPageFinished(WebView view, String url) {
                mainView.setVisibility(View.VISIBLE);
                indicator.setVisibility(View.INVISIBLE);
                rfaLayout.setVisibility(View.VISIBLE);
                boolean isMatch = false;
                try {
                    for (String newurl : urlYtPages) {
                        isMatch = (url.split("channel")[1])
                                .equals(newurl.split("channel")[1]);
                        if (isMatch) {
                            break;
                        }
                    }
                    if (!isMatch) {
                        pageSpinner.setSelection(0, true);
                    }
                } catch (Exception ignored) {
                }
                verb(url);
            }

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                indicator.setVisibility(View.VISIBLE);
                mainView.setVisibility(View.INVISIBLE);
                rfaLayout.setVisibility(View.INVISIBLE);
                if (url.contains("m.youtube") && DataStore.getInstance(getBaseContext()).isDeskModeEnabled()) {
                    String[] cow1 = url.split("m.");
                    url = "https://www." + cow1[1];
                    mainView.loadUrl(url);
                }
                if (url.contains("account")) {
                    getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
                } else {
                    getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
                }
            }

            @Override
            public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                if (errorCode == -2) {
                    mainView.loadUrl(ERROR_HTML);
                }
            }

            @TargetApi(android.os.Build.VERSION_CODES.M)
            @Override
            public void onReceivedError(WebView view, WebResourceRequest req, WebResourceError err) {
                if (err.getErrorCode() == -2) {
                    mainView.loadUrl(ERROR_HTML);
                }
            }

            @Override
            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                handler.proceed();
            }

            @TargetApi(Build.VERSION_CODES.LOLLIPOP)
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, final WebResourceRequest request) {
                if ((!(request.getUrl().toString().contains("youtube") | request.getUrl().toString().contains("google")))) {
                    new AlertDialog.Builder(MainActivity.this)
                            .setMessage("YouP3 will forward external urls to browser.")
                            .setCancelable(false)
                            .setPositiveButton("Ok", (dialog, which) -> {
                                Intent intent = new Intent(Intent.ACTION_VIEW);
                                intent.setData(request.getUrl());
                                startActivity(intent);
                            })
                            .setNegativeButton("Back", (dialog, which) -> {
                                if (mainView.canGoBack()) {
                                    mainView.goBack();
                                }
                            }).show();
                }
                return super.shouldOverrideUrlLoading(view, request);
            }

            @Override
            public boolean shouldOverrideUrlLoading(WebView view, final String url) {
                if ((!(url.contains("youtube") | url.contains("google")))) {
                    new AlertDialog.Builder(MainActivity.this)
                            .setMessage("YouP3 will forward external urls to browser?!?")
                            .setCancelable(false)
                            .setPositiveButton("Ok", (dialog, which) -> {
                                Intent intent = new Intent(Intent.ACTION_VIEW);
                                intent.setData(Uri.parse(url));
                                startActivity(intent);
                            })
                            .setNegativeButton("Back", (dialog, which) -> {
                                if (mainView.canGoBack()) {
                                    mainView.goBack();
                                }
                            }).show();
                }
                return super.shouldOverrideUrlLoading(view, url);
            }

            @TargetApi(Build.VERSION_CODES.LOLLIPOP)
            @Override
            public WebResourceResponse shouldInterceptRequest(WebView view, final WebResourceRequest request) {
                if (request.getUrl().toString().matches(".*googlevideo.com/videoplayback.*")) {
                    new Handler(Looper.getMainLooper()).post(() -> {
                        String urlBob = request.getUrl().toString().replaceAll("&range=[\\d-]*&", "&");
                        if (urlBob.contains("mime=audio") && urlBob.contains("buf=0")) {
                            urlAll = urlBob;
                            urlTitle = mainView.getUrl();
                        }
                    });
                }
                return super.shouldInterceptRequest(view, request);
            }

            @Override
            public WebResourceResponse shouldInterceptRequest(WebView view, final String url) {
                if (url.matches(".*googlevideo.com/videoplayback.*")) {
                    new Handler(Looper.getMainLooper()).post(() -> {
                        String urlBob = url.replaceAll("&range=[\\d-]*&", "&");
                        if (urlBob.contains("mime=audio") && urlBob.contains("buf=0")) {
                            urlAll = urlBob;
                            urlTitle = mainView.getUrl();
                        }
                    });
                }
                return super.shouldInterceptRequest(view, url);
            }

        });

        if (DataStore.getInstance(getBaseContext()).isNewUserForIntro()) {

            TapTargetSequence sequence2 = new TapTargetSequence(this);
            TapTargetSequence sequence = new TapTargetSequence(this);
            //<editor-fold desc="HERE ~~~~~~~ Taptarget ~~~~~~~~~ HERE">
            sequence.targets(
                    TapTarget.forToolbarMenuItem(toolbar,
                            R.id.action_search,
                            "That's the Search Bar!",
                            "Search the most you love from what you don't!")
                            .outerCircleColor(android.R.color.background_dark).id(1996),
                    TapTarget.forToolbarMenuItem(toolbar,
                            R.id.action_bookmark,
                            "That's the Bookmark button!",
                            "Make bookmarks on one single click!")
                            .outerCircleColor(android.R.color.background_dark).id(1995),
                    TapTarget.forToolbarMenuItem(toolbar,
                            R.id.action_show_bookmarks,
                            "That's the Bookmark Home!",
                            "Find all of your bookmarks here!")
                            .outerCircleColor(android.R.color.background_dark).id(1994),
                    TapTarget.forView(rfaBtn,
                            "Here comes the main action part!",
                            "Download & Share your favourite youtube content!")
                            .outerCircleColor(android.R.color.background_dark)
                            .tintTarget(false)
                            .id(1992),
                    TapTarget.forView(navigationView.getMenu().findItem(R.id.go_all).getActionView(),
                            "Here is a pre-made categories list!",
                            "Enjoy!")
                            .tintTarget(false).id(1993)

            );
            sequence2.targets(

                    TapTarget.forToolbarMenuItem(toolbar,
                            R.id.action_search,
                            "That's the Search Bar!",
                            "Search the most you love from what you don't!")
                            .outerCircleColor(android.R.color.background_dark).id(1996),
                    TapTarget.forToolbarMenuItem(toolbar,
                            R.id.action_bookmark,
                            "That's the Bookmark button!",
                            "Make bookmarks on one single click!")
                            .outerCircleColor(android.R.color.background_dark).id(1995),
                    TapTarget.forToolbarMenuItem(toolbar,
                            R.id.action_show_bookmarks,
                            "That's the Bookmark Home!",
                            "Find all of your bookmarks here!")
                            .outerCircleColor(android.R.color.background_dark).id(1994),
                    TapTarget.forView(rfaBtn,
                            "Here comes the main action part!",
                            "Download & Share your favourite youtube content!")
                            .outerCircleColor(android.R.color.background_dark)
                            .tintTarget(false)
                            .id(1992),
                    TapTarget.forView(navigationView.getMenu().findItem(R.id.go_all).getActionView(),
                            "Here is a pre-made categories list!",
                            "Enjoy!")
                            .tintTarget(false).id(1993)

            );
            //</editor-fold>
            sequence.listener(new TapTargetSequence.Listener() {
                @Override
                public void onSequenceFinish() {
                    DataStore.getInstance(getBaseContext()).setNewUserNoMoreForINTRO();
                    drawer.closeDrawer(GravityCompat.START);
                    new AlertDialog.Builder(MainActivity.this)
                            .setTitle("Sign-In?")
                            .setMessage("Would you like to sign in into YouTube for a personalized experience?")
                            .setNegativeButton("Privacy Policy", (dialog, which) -> startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://github.com/ExploiTR/YouP3/blob/master/privacy.md"))))
                            .setOnDismissListener(dialog -> startService(new Intent(MainActivity.this, DownloadExecutorService.class)))
                            .setPositiveButton("Why not?", (dialog, which) -> mainView.loadUrl(
                                    "https://accounts.google.com/" +
                                            "signin/v2/identifier?passive=true" +
                                            "&service=youtube&hl=en&uilel=3" +
                                            "&continue=https%3A%2F%2Fwww.youtube.com" +
                                            "%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Dmobile" +
                                            "%26next%3D%252F%26hl%3Den&flowName=GlifWebSignIn" +
                                            "&flowEntry=ServiceLogin"
                            ))
                            .show();
                }

                @Override
                public void onSequenceStep(TapTarget lastTarget, boolean targetClicked) {
                    if (lastTarget.id() == 1992 && targetClicked) {
                        drawer.openDrawer(GravityCompat.START);
                    }
                }

                @Override
                public void onSequenceCanceled(TapTarget lastTarget) {
                    new AlertDialog.Builder(MainActivity.this)
                            .setTitle("Uh oh")
                            .setCancelable(false)
                            .setMessage("You canceled the sequence")
                            .setPositiveButton("Start Again", (dialog, which) -> {
                                dialog.dismiss();
                                sequence2.start();
                            }).show();
                }
            });
            sequence2.listener(new TapTargetSequence.Listener() {
                @Override
                public void onSequenceFinish() {

                }

                @Override
                public void onSequenceStep(TapTarget lastTarget, boolean targetClicked) {

                }

                @Override
                public void onSequenceCanceled(TapTarget lastTarget) {
                    DataStore.getInstance(getBaseContext()).setNewUserNoMoreForINTRO();
                    SuperToast.makeText(getApplicationContext(), "Looks like you know way too much", 1);
                }
            });

            new AlertDialog.Builder(MainActivity.this)
                    .setTitle("Hi!")
                    .setMessage("Mate, looks like you're first time here. Have a tour?")
                    .setPositiveButton("Yas", (dialog, which) -> sequence.start())
                    .setNegativeButton("Leave me", (dialogz, whichz) -> {
                        DataStore.getInstance(getBaseContext()).setNewUserNoMoreForINTRO();
                        drawer.closeDrawer(GravityCompat.START);
                        new AlertDialog.Builder(MainActivity.this)
                                .setTitle("Sign-In?")
                                .setMessage("Would you like to sign in into YouTube for a personalized experience?")
                                .setNeutralButton("Privacy Policy", (dialog, which) -> startActivity(new Intent(Intent.ACTION_VIEW,
                                        Uri.parse("https://github.com/ExploiTR/YouP3/blob/master/privacy.md"))))
                                .setNegativeButton("No", null)
                                .setOnDismissListener(dialog -> startService(new Intent(MainActivity.this, DownloadExecutorService.class)))
                                .setPositiveButton("Why not?", (dialog, which) -> mainView.loadUrl(
                                        "https://accounts.google.com/" +
                                                "signin/v2/identifier?passive=true" +
                                                "&service=youtube&hl=en&uilel=3" +
                                                "&continue=https%3A%2F%2Fwww.youtube.com" +
                                                "%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Dmobile" +
                                                "%26next%3D%252F%26hl%3Den&flowName=GlifWebSignIn" +
                                                "&flowEntry=ServiceLogin"
                                ))
                                .show();
                    })
                    .show();
        }


        //<editor-fold desc="Spinner Setup Here">
        pageSpinner = (Spinner) navigationView.getMenu().findItem(R.id.go_all).getActionView();
        pageSpinner.setAdapter(new ArrayAdapter<>(this, android.R.layout.simple_spinner_dropdown_item, new String[]{
                "Select",
                "Trending",
                "Life-Style",
                "Music",
                "Sports",
                "Gaming",
                "Movies",
                "News",
                "Live",
                "VR"
        }));
        //</editor-fold>

        pageSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (position == 1) { //I REALLY DON'T TRUST SWITCH CLAUSES
                    mainView.loadUrl(urlYtPages[0]);
                } else if (position == 2) {
                    mainView.loadUrl(urlYtPages[1]);
                } else if (position == 3) {
                    mainView.loadUrl(urlYtPages[2]);
                } else if (position == 4) {
                    mainView.loadUrl(urlYtPages[3]);
                } else if (position == 5) {
                    mainView.loadUrl(urlYtPages[4]);
                } else if (position == 6) {
                    mainView.loadUrl(urlYtPages[5]);
                } else if (position == 7) {
                    mainView.loadUrl(urlYtPages[6]);
                } else if (position == 8) {
                    mainView.loadUrl(urlYtPages[7]);
                } else if (position == 9) {
                    mainView.loadUrl(urlYtPages[8]);
                }
                drawer.closeDrawers();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
            }
        });

        setBookMarkListener(mainView);

        if (!Helper.isNetworkAvailable(MainActivity.this)) {
            new AlertDialog.Builder(MainActivity.this)
                    .setTitle("Network Error :")
                    .setMessage("\nCan't Connect To Server")
                    .setPositiveButton("Ok", null).show();
            mainView.loadUrl(ERROR_HTML);
        } else {
            mainView.loadUrl("https://www.youtube.com/");
        }

        if (Objects.equals(getIntent().getAction(), reDownloadAction)) {
            String localLink = getIntent().getDataString();
            if (localLink != null) {
                if (localLink.contains("youtu.be")) {
                    mainView.loadUrl("https://www.youtube.com/watch?v=" + localLink.split("be/")[1]);
                } else {
                    mainView.loadUrl(localLink);
                }
            } else {
                mainView.loadUrl(ERROR_HTML);
                SuperToast.makeText(this, "Invalid Url", Toast.LENGTH_SHORT);
            }
            Snackbar.make(rfaLayout, "Loading Given YouTube URL", Snackbar.LENGTH_SHORT).show();
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            checkWebViewVersionO();
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            checkWebViewVersionN();
        } else {
            checkWebViewHard();
        }


        if (!Helper.isMyServiceRunning(DownloadExecutorService.class, getBaseContext()) && !DataStore.getInstance(getBaseContext()).isNewUserForSERVICE_STARTER()) {
            if (ContextCompat.checkSelfPermission(getBaseContext(), Manifest.permission.FOREGROUND_SERVICE) ==
                    PackageManager.PERMISSION_GRANTED) {
                startService(new Intent(getBaseContext(), DownloadExecutorService.class));
            } else {
                Toast.makeText(getBaseContext(), "Service Permission Denial", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void checkWebViewVersionN() {
        try {
            PackageInfo pf = getPackageManager().getPackageInfo("com.android.chrome", 0);
            if (isBuildFinal) {
                Answers.getInstance().logContentView(new ContentViewEvent()
                        .putContentName("WebView Impl")
                        .putCustomAttribute("SDK", Build.VERSION.SDK_INT)
                        .putCustomAttribute("PackageName", pf.packageName));
            } else {
                verb(pf.packageName + "\n" + pf.versionCode);
            }
            //will just check chrome
            if (pf.versionCode < CURRENT_TEST_CHROME_VERSION) {
                //old
                new AlertDialog.Builder(MainActivity.this)
                        .setTitle("WebClient is outdated")
                        .setMessage("Your Chrome is a little bit outdated and thus you can experince problems." +
                                " Consider updating your Chrome from Google Play")
                        .setPositiveButton("Take me there", (dialog, which) -> startActivity(new Intent(
                                Intent.ACTION_VIEW,
                                Uri.parse("https://play.google.com/store/apps/details?id=com.android.chrome")
                        ).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)))
                        .setNegativeButton("I'll do it", null).show();
            }

        } catch (Exception ignored) {
        }
    }

    @TargetApi(Build.VERSION_CODES.O)
    private void checkWebViewVersionO() {
        PackageInfo pf = WebView.getCurrentWebViewPackage();

        if (isBuildFinal) {
            if (pf != null) {
                Answers.getInstance().logContentView(new ContentViewEvent()
                        .putContentName("WebView Impl")
                        .putCustomAttribute("SDK", Build.VERSION.SDK_INT)
                        .putCustomAttribute("PackageName", pf.packageName));
            }
        } else {
            if (pf != null)
                verb(pf.packageName + "\n" + pf.versionCode);
        }
        if (pf != null)
            if (pf.packageName.equals("com.android.chrome")) {
                //will just check chrome
                if (pf.versionCode < CURRENT_TEST_CHROME_VERSION) {
                    //old
                    new AlertDialog.Builder(MainActivity.this)
                            .setTitle("WebClient is outdated")
                            .setMessage("Your Chrome is a little bit outdated and thus you can experince problems." +
                                    " Consider updating your Chrome from Google Play")
                            .setPositiveButton("Take me there", (dialog, which) -> startActivity(new Intent(
                                    Intent.ACTION_VIEW,
                                    Uri.parse("https://play.google.com/store/apps/details?id=com.android.chrome")
                            ).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)))
                            .setNegativeButton("I'll do it", null).show();
                }
            }
    }

    private void checkWebViewHard() {
        try {
            PackageInfo pf = getPackageManager().getPackageInfo("com.google.android.webview", 0);
            if (isBuildFinal) {
                Answers.getInstance().logContentView(new ContentViewEvent()
                        .putContentName("WebView Impl")
                        .putCustomAttribute("SDK", Build.VERSION.SDK_INT)
                        .putCustomAttribute("PackageName", pf.packageName));
            } else {
                verb(pf.packageName + "\n" + pf.versionCode);
            }

            if (pf.versionCode < CURRENT_TEST_CHROME_VERSION) {
                //old
                new AlertDialog.Builder(MainActivity.this)
                        .setTitle("WebClient is outdated")
                        .setMessage("Your Chrome is a little bit outdated and thus you can experince problems." +
                                " Consider updating your Chrome from Google Play")
                        .setPositiveButton("Take me there", (dialog, which) -> startActivity(new Intent(
                                Intent.ACTION_VIEW,
                                Uri.parse("https://play.google.com/store/apps/details?id=com.google.android.webview")
                        ).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)))
                        .setNegativeButton("I'll do it", null).show();
            }

        } catch (Exception ignored) {
        }
    }

    private void setBookMarkListener(final WebView mainView) {
        final Handler handler = new Handler();
        if (mainView != null) {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    if (Launcher.i().isShouldLoad()) {
                        mainView.loadUrl(Launcher.i().getUrl());
                        Launcher.i().setShouldLoad(false);
                    }
                    handler.postDelayed(this, 100);
                }
            });
        }
    }

    private void setDeskTopMode(WebSettings settings, boolean b) {
        if (b) {
            settings.setUserAgentString(settings.getUserAgentString().replace("Mobile", "eliboM").replace("Android", "diordnA"));
        } else {
            settings.setUserAgentString(settings.getUserAgentString().replace("eliboM", "Mobile").replace("diordnA", "Android"));
        }
        mainView.reload();
    }

    private void checkFilePermsOkay(final Context context) {
        new Handler().postDelayed(() -> {
            File dirFile = new File(Environment.getExternalStorageDirectory().getPath() + "/YouP3");
            if (!dirFile.exists()) {
                if (!dirFile.mkdir()) {
                    new AlertDialog.Builder(context)
                            .setTitle("Error Accessing Storage")
                            .setMessage("YouP3 can't access your storage. Check if everything is okay in settings")
                            .setCancelable(true)
                            .setPositiveButton("Exit", (dialog, which) -> {
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                    finishAndRemoveTask();
                                } else {
                                    finish();
                                }
                            })
                            .setNeutralButton("Settings", (dialog, which) -> startActivity(new Intent(Settings.ACTION_SETTINGS))).show();
                }
            }
        }, 10000);
    }

    private void setUserForLogging() {
        Crashlytics.setUserName(Build.DEVICE);
        Crashlytics.setUserIdentifier(Build.FINGERPRINT);
    }

    @Override
    protected void onPause() {
        mainView.onPause();
        super.onPause();
    }

    @Override
    protected void onResume() {
        mainView.onResume();
        isActive = true;
        super.onResume();
    }

    @Override
    public void onBackPressed() {
        if (mainView.canGoBack()) {
            mainView.goBack();
        } else {
            AlertDialog.Builder alertDialog = new AlertDialog.Builder(MainActivity.this);
            alertDialog.setTitle("Exit");
            alertDialog.setMessage("Close App?");
            alertDialog.setPositiveButton("Yes", (dialog, which) -> {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                    finishAndRemoveTask();
                } else finish();
            });
            alertDialog.setNegativeButton("Nope", (dialog, which) -> dialog.dismiss());
            AlertDialog dialog = alertDialog.create();
            dialog.show();
        }
    }

    @Override
    protected void onDestroy() {
        Helper.clearCache(mainView);
        isActive = false;
        if (Helper.isDownloadInActive()) {
            stopService(new Intent(MainActivity.this, DownloadExecutorService.class));
            NotificationManagerCompat.from(getApplicationContext()).cancelAll();
        }
        LocalBroadcastManager.getInstance(getBaseContext()).unregisterReceiver(multiHandler);
        super.onDestroy();
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.go_home) {
            mainView.loadUrl("https://www.youtube.com");
        }
        if (id == R.id.go_me) {
            startActivity(new Intent(MainActivity.this, AboutActivity.class));
        }
        if (id == R.id.downloads) {

            startActivity(new Intent(MainActivity.this, DownloadsActivity.class));
        }
        if (id == R.id.settings) {
            startActivity(new Intent(MainActivity.this, SettingsActivity.class));
        }
        if (id == R.id.go_exit) {
            System.exit(0);
        }
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.mux_menu, menu);
        MenuItem myActionMenuItem = menu.findItem(R.id.action_search);
        SearchView searchView = (SearchView) myActionMenuItem.getActionView();
        searchView.setQueryHint("How to make stuffs like....");
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                if (!query.equals("")) {
                    try {
                        mainView.loadUrl("https:www.youtube.com/results?search_query=" +
                                URLEncoder.encode(query, "UTF-8"));
                    } catch (Exception e) {
                        e.printStackTrace();
                        e.getSuppressed();
                    }
                } else {
                    SuperToast.makeText(getApplicationContext(), "Please enter some text to search.",
                            Toast.LENGTH_SHORT);
                }
                searchView.clearFocus();
                findViewById(R.id.main).requestFocus();
                return true;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                return false;
            }
        });
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getOrder() == 1) {
            if (mainView.getUrl().contains("v=")) {
                /*Because it doesn't work*/
                String url = mainView.getUrl();
                String flue = "";
                if (url.contains("youtu.be")) {
                    flue = "https://www.youtube.com/watch?v=" + url.split("be/")[1];
                } else if (url.contains("m.youtube")) {
                    flue = "https://www.youtube.com/watch?v=" + url.split("v=")[1];
                } else if (url.contains("&list=")) {
                    flue = "https://www.youtube.com/watch?v=" +
                            url.split("v=")[1].split("&list=")[0];
                }

                String finalUrl = flue;
                VideoScreen.load(mainView.getUrl())
                        .start(MainActivity.this)
                        .setOnCompleteListener(what -> runOnUiThread(() -> {
                            for (final BookMark mark : new BookRealmController().getBookMarks()) {
                                if (mainView.getUrl().equals(mark.getUrl())) {
                                    canceled = true;
                                    new AlertDialog.Builder(MainActivity.this)
                                            .setTitle("Oops!")
                                            .setMessage("BookMark Already Exists!")
                                            .setPositiveButton("Update", (dialog, which) -> {
                                                new BookMarkManager().push(
                                                        mark.getId(),
                                                        Helper.getTitle(getBaseContext(), finalUrl),
                                                        mainView.getUrl(),
                                                        what
                                                );
                                                SuperToast.makeText(getBaseContext(), "Page Got Bookmarked!", Toast.LENGTH_SHORT);
                                            }).setNegativeButton("Cancel", null).show();
                                }
                            }
                            if (!canceled) {
                                if (mainView.getFavicon() != null) {
                                    new BookMarkManager().push(
                                            new SecureRandom().nextInt(Integer.MAX_VALUE),
                                            Helper.getTitle(getBaseContext(), finalUrl),
                                            mainView.getUrl(),
                                            what
                                    );
                                }
                                SuperToast.makeText(getBaseContext(), "Page Got Bookmarked!", Toast.LENGTH_SHORT);
                            }
                        }));
            } else {
                SuperToast.makeText(getBaseContext(), "Only Videos Can Be Added To BookMarks :-)", Toast.LENGTH_SHORT);
            }
        } else if (item.getOrder() == 2) {
            startActivity(new Intent(MainActivity.this, BookMarkActivity.class));
        }
        return true;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_CODE_PERMISSION) {
            if (resultCode != RESULT_OK) {
                SuperToast.makeText(MainActivity.this, "Can't work without permission", Toast.LENGTH_SHORT);
                finish();
            }
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        ConstraintLayout mx = findViewById(R.id.main);
        ViewTreeObserver vto = mx.getViewTreeObserver();
        vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                int width = mx.getMeasuredWidth();
                int height = mx.getMeasuredHeight();
                mx.removeView(mainView);
                mx.addView(mainView, 0, new ConstraintLayout.LayoutParams(width, height));
                mx.getViewTreeObserver().removeOnGlobalLayoutListener(this);
            }
        });
        super.onConfigurationChanged(newConfig);
    }

    @Override
    public void onRFACItemLabelClick(int position, RFACLabelItem item) {
        switch (position) {
            case 0:
                SuperToast.makeText(getApplicationContext(), "Share Current Video", Toast.LENGTH_SHORT);
            case 1:
                SuperToast.makeText(getApplicationContext(),
                        DataStore.getInstance(getBaseContext()).isAdvancedDownloadMode() ?
                                "Show Audio/Video Formats To Download" : "Show Audio Format To Download", Toast.LENGTH_SHORT);
        }
    }

    @Override
    public void onRFACItemIconClick(int position, RFACLabelItem item) {
        if (position == 0) {
            Intent i = new Intent(Intent.ACTION_SEND)
                    .setType("text/plain")
                    .putExtra(Intent.EXTRA_TEXT, mainView.getUrl());
            startActivity(Intent.createChooser(i, "Share Link"));
        } else if (position == 1) {
            if (mainView.getUrl().contains("watch?")) {
                if (urlAll != null) {
                    String url = mainView.getUrl();
                    String flue;

                    //https://www.youtube.com/watch?v=J8Ma7V33Ju0
                    //https://m.youtube.com/watch?v=J8Ma7V33Ju0
                    //https://www.youtube.com/watch?v=aJOTlE1K90k&list=PLx0sYbCqOb8TBPRdmBHs5Iftvv9TPboYG

                    if (mainView.getUrl().contains("&list=")) {
                        flue = "https://www.youtube.com/watch?v=" +
                                url.split("v=")[1].split("&list=")[0];
                    } else {
                        flue = "https://www.youtube.com/watch?v=" +
                                url.split("v=")[1];
                    }
                    if (DataStore.getInstance(getBaseContext()).isAdvancedDownloadMode()) {
                        if (flue.equals("")) {
                            SuperToast.makeText(MainActivity.this, "Error processing url - Please retry", Toast.LENGTH_SHORT);
                            return;
                        }
                        startAdvanceDownloadProcess(flue);
                    } else {
                        if (urlAll.equals("")) {
                            Snackbar.make(rfaLayout, "Please Wait,Loading Urls \n Try After Some Time", Snackbar.LENGTH_LONG).show();
                        } else {
                            new BasicDownloadDetailsFetcher(urlAll, mainView.getUrl(), urlTitle, MainActivity.this).execute();
                        }
                    }
                } else {
                    Snackbar.make(rfaLayout, "Empty Url", Snackbar.LENGTH_LONG).show();
                }
            } else {
                Snackbar.make(rfaLayout, "Please Select A Valid Youtube Video ", Snackbar.LENGTH_SHORT).show();
            }
        }
    }

    private void startAdvanceDownloadProcess(String ytUrl) {
        View pro = getLayoutInflater().inflate(R.layout.progress_modal_layout, null);
        AlertDialog ar = new AlertDialog.Builder(MainActivity.this)
                .setView(pro)
                .setCancelable(false)
                .show();
        pro.findViewById(R.id.dismiss).setOnClickListener(v -> {
            toggleAdvDownload = true;
            ar.cancel();
        });
        new YouTubeExtractor(MainActivity.this) {
            @Override
            public void onExtractionComplete(final SparseArray<YtFile> ytFiles, final VideoMeta vMeta) {
                /*
                 * fix sudden stuck*/
                if (toggleAdvDownload) {
                    toggleAdvDownload = false;
                    ar.cancel();
                    return;
                }

                if (ytFiles == null || vMeta == null) {
                    SuperToast.makeText(MainActivity.this, "Error processing url - Please retry", Toast.LENGTH_SHORT);
                    return;
                }

                BottomSheetFragment fragment = new BottomSheetFragment().prepare(vMeta, ytUrl);

                for (int i = 0; i < ytFiles.size(); i++) {
                    int key = ytFiles.keyAt(i);
                    if (ytFiles.get(key) != null) {
                        /*
                         *  480 : null : -1 : 30 : 135 : null : mp4      .getHeight()
                         *  720 : null : -1 : 30 : 136 : null : mp4      .getVideoCodec()
                         *  -1 : null : 128 : 30 : 140 : null : m4a      .getAudioBitrate()
                         *  144 : null : -1 : 30 : 160 : null : mp4      .getFps()
                         *  -1 : null : 128 : 30 : 171 : null : webm     .getItag()
                         *  240 : null : -1 : 30 : 242 : null : webm     .getAudioCodec()
                         *  360 : null : -1 : 30 : 243 : null : webm     .getExt()
                         *  */

                        Format format = ytFiles.get(key).getFormat();
                        if (format.getHeight() != -1 && format.getAudioBitrate() != -1) {
                            fragment.setupDialogData(ytFiles.get(key), FileHolder.TYPE_VIDEO);
                        } else if (format.getHeight() != -1 && format.getAudioBitrate() == -1) {
                            fragment.setupDialogData(ytFiles.get(key), FileHolder.TYPE_VIDEO_SILENT);
                        } else if (format.getHeight() == -1 && format.getAudioBitrate() != -1) {
                            fragment.setupDialogData(ytFiles.get(key), FileHolder.TYPE_AUDIO);
                        }

                        verb("fuck", format.getHeight() + " : " +
                                format.getVideoCodec() + " : " +
                                format.getAudioBitrate() + " : " +
                                format.getFps() + " : " +
                                format.getItag() + " : " +
                                format.getAudioCodec() + " : " +
                                format.getExt());

                    } else {
                        ytFiles.remove(key);
                    }
                }

                fragment.show(getSupportFragmentManager(), fragment.getTag());
                ar.cancel();
            }
        }.extract(ytUrl, true, true);
    }


}
