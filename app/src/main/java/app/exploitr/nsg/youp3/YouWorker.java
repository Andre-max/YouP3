package app.exploitr.nsg.youp3;

import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.support.multidex.MultiDexApplication;

import com.downloader.PRDownloader;
import com.downloader.PRDownloaderConfig;
import com.github.hiteshsondhi88.libffmpeg.FFmpeg;
import com.github.hiteshsondhi88.libffmpeg.LoadBinaryResponseHandler;
import com.github.hiteshsondhi88.libffmpeg.exceptions.FFmpegNotSupportedException;

import downloader.utils.DownloadExecutorService;
import utils.DataStore;

public class YouWorker extends MultiDexApplication {
    @Override
    public void onCreate() {

        PRDownloaderConfig config = PRDownloaderConfig.newBuilder()
                .setDatabaseEnabled(true)
                .setConnectTimeout(12000 * 1000)
                .setReadTimeout(120000 * 1000)
                .setUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)" +
                        " Chrome/60.0.3112.113 Safari/537.36")
                .build();
        PRDownloader.initialize(this, config);

        PRDownloader.cleanUp(7);

        try {
            if (!isMyServiceRunning(DownloadExecutorService.class) && !DataStore.getInstance(getBaseContext()).isNewUserForSERVICE_STARTER()) {
                startService(new Intent(this, DownloadExecutorService.class));
            }
        } catch (Exception ignored) {
        }

        AsyncTask.execute(new Runnable() {
            @Override
            public void run() {
                FFmpeg ffmpeg = FFmpeg.getInstance(getApplicationContext());
                try {
                    ffmpeg.loadBinary(new LoadBinaryResponseHandler() {
                        @Override
                        public void onStart() {
                        }

                        @Override
                        public void onFailure() {
                            DataStore.getInstance(getBaseContext()).setConversionSupported(false);
                        }

                        @Override
                        public void onSuccess() {
                            DataStore.getInstance(getBaseContext()).setConversionSupported(true);
                        }

                        @Override
                        public void onFinish() {
                        }
                    });
                } catch (FFmpegNotSupportedException ignored) {
                    DataStore.getInstance(getBaseContext()).setConversionSupported(false);
                }
            }
        });

        super.onCreate();

    }

    @SuppressWarnings("SameParameterValue")
    private boolean isMyServiceRunning(Class<?> serviceClass) {
        ActivityManager manager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
        if (manager != null) {
            for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
                if (serviceClass.getName().equals(service.service.getClassName())) {
                    return true;
                }
            }
        }
        return false;
    }


}
