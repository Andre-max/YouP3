package app.exploitr.nsg.youp3;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.AppCompatEditText;
import android.support.v7.widget.SwitchCompat;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.CompoundButton;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import com.llollox.androidtoggleswitch.widgets.ToggleSwitch;

import net.rdrei.android.dirchooser.DirectoryChooserActivity;
import net.rdrei.android.dirchooser.DirectoryChooserConfig;

import java.io.File;
import java.util.Objects;

import utils.DataStore;
import utils.SuperToast;

public class SettingsActivity extends AppCompatActivity {

    private static final int REQUEST_DIRECTORY = 123;
    SwitchCompat screenFull,remBar,deskTop,defDownloader;
    ToggleSwitch basicAdv;
    AppCompatEditText destin;
    ImageButton browse_file;
    TextView wrongText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_settings);

        Objects.requireNonNull(getSupportActionBar()).setTitle("Settings");

        screenFull = findViewById(R.id.fullScr);
        remBar = findViewById(R.id.remBar);
        deskTop = findViewById(R.id.deskMode);
        basicAdv = findViewById(R.id.basicAdv);
        defDownloader = findViewById(R.id.defDownloader);
        destin = findViewById(R.id.destin);
        browse_file = findViewById(R.id.browse_directory);
        wrongText = findViewById(R.id.wrongText);

        screenFull.setChecked(DataStore.getInstance(getBaseContext()).isFullScreen());
        remBar.setChecked(DataStore.getInstance(getBaseContext()).isRemoveToolbar());
        deskTop.setChecked(DataStore.getInstance(getBaseContext()).isDeskModeEnabled());
        basicAdv.setCheckedPosition(DataStore.getInstance(getBaseContext()).isAdvancedDownloadMode() ? 1 : 0); //1 adv 0 basic
        defDownloader.setChecked(DataStore.getInstance(getBaseContext()).shouldUseDefaultDownloader());

        screenFull.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                Intent superI = new Intent(MainActivity.broadCastIntentFullScreen);
                superI.putExtra(MainActivity.broadCastIntentFullScreen, isChecked);
                LocalBroadcastManager.getInstance(getBaseContext()).sendBroadcast(superI);
                DataStore.getInstance(getBaseContext()).setFullScreen(isChecked);
            }
        });

        deskTop.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                Intent superI = new Intent(MainActivity.broadCastIntent);
                superI.putExtra(MainActivity.broadCastIntent, isChecked);
                LocalBroadcastManager.getInstance(getBaseContext()).sendBroadcast(superI);
                DataStore.getInstance(getBaseContext()).setDeskModeEnabled(isChecked);
                finish();
            }
        });

        remBar.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                Intent superI = new Intent(MainActivity.broadCastIntentToolbar);
                superI.putExtra(MainActivity.broadCastIntentToolbar, isChecked);
                LocalBroadcastManager.getInstance(getBaseContext()).sendBroadcast(superI);
                DataStore.getInstance(getBaseContext()).setRemoveToolbar(isChecked);
            }
        });

        basicAdv.setOnChangeListener(new ToggleSwitch.OnChangeListener() {
            @Override
            public void onToggleSwitchChanged(int position) {
                SuperToast.makeText(getApplicationContext(), position == 0 ? "Basic Mode" : "Advanced Mode", Toast.LENGTH_SHORT);
                //wow, made it boolean? string1:string2
                DataStore.getInstance(getBaseContext()).setAdvancedDownloadMode(position == 1);
            }
        });

        defDownloader.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DataStore.getInstance(getBaseContext()).setShouldUseDefaultDownloader(isChecked);
            }
        });

        findViewById(R.id.report).setOnClickListener(v -> {
            Intent x = new Intent(Intent.ACTION_VIEW, Uri.parse("https://github.com/ExploiTR/YouP3/issues"));
            x.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            startActivity(x);
        });

        findViewById(R.id.okay).setOnClickListener(v -> {
            if (checkFile(Objects.requireNonNull(destin.getText()).toString())) {
                DataStore.getInstance(getBaseContext()).setPathDownload(destin.getText().toString());
                SuperToast.makeText(this, "Changed Download Directory to : " + destin.getText().toString()
                        ,Toast.LENGTH_SHORT);
                finish();
            } else {
                SuperToast.makeText(this, "Download Directory Selected Is Invalid", Toast.LENGTH_SHORT);
            }
        });


        destin.setText(DataStore.getInstance(getBaseContext()).getPathDownload());
        destin.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                checkFile(s.toString());
            }
        });
        checkFile(destin.getText().toString());

        browse_file.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Intent chooserIntent = new Intent(SettingsActivity.this, DirectoryChooserActivity.class);

                final DirectoryChooserConfig config = DirectoryChooserConfig.builder()
                        .newDirectoryName("YouP3")
                        .allowReadOnlyDirectory(true)
                        .allowNewDirectoryNameModification(true)
                        .build();

                chooserIntent.putExtra(DirectoryChooserActivity.EXTRA_CONFIG, config);

                // REQUEST_DIRECTORY is a constant integer to identify the request, e.g. 0
                startActivityForResult(chooserIntent, REQUEST_DIRECTORY);
            }
        });
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == REQUEST_DIRECTORY) {
            if (resultCode == DirectoryChooserActivity.RESULT_CODE_DIR_SELECTED) {
                destin.setText(data
                        .getStringExtra(DirectoryChooserActivity.RESULT_SELECTED_DIR));
            } else {
                SuperToast.makeText(this, "Nothing Selected :-(", Toast.LENGTH_SHORT);
            }
        }
    }

    private boolean checkFile(String text) {
        File newFile = new File(text);
        if (newFile.exists() && newFile.canWrite() && newFile.canRead() && newFile.canExecute()) {
            wrongText.setVisibility(View.GONE);
            return true;
        } else {
            wrongText.setVisibility(View.VISIBLE);
            return false;
        }
    }

}
